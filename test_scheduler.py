#!/usr/bin/env python3
"""
Script para testar a configura√ß√£o do scheduler e jobs
"""

import os
import pytz
import logging
from datetime import datetime, time
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Timezone
TIMEZONE = pytz.timezone('America/Sao_Paulo')

async def test_job():
    """Job de teste"""
    now = datetime.now(TIMEZONE)
    logger.info(f"üéØ JOB DE TESTE EXECUTADO √ÄS: {now.strftime('%Y-%m-%d %H:%M:%S %Z')}")

def test_scheduler_configuration():
    """Testa a configura√ß√£o do scheduler"""
    logger.info("üß™ Testando configura√ß√£o do scheduler...")
    
    # Cria scheduler
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    
    # Hor√°rio atual
    now = datetime.now(TIMEZONE)
    logger.info(f"‚è∞ Hor√°rio atual: {now.strftime('%Y-%m-%d %H:%M:%S %Z')}")
    
    # Testa configura√ß√£o dos jobs como no bot original
    jobs_config = [
        {
            'name': 'daily_morning_message',
            'time': time(7, 0, 0, tzinfo=TIMEZONE),
            'description': 'Mensagem matinal √†s 7:00'
        },
        {
            'name': 'daily_afternoon_motivational',
            'time': time(14, 0, 0, tzinfo=TIMEZONE),
            'description': 'Primeira mensagem motivacional √†s 14:00'
        },
        {
            'name': 'daily_evening_motivational',
            'time': time(20, 0, 0, tzinfo=TIMEZONE),
            'description': 'Segunda mensagem motivacional √†s 20:00'
        },
        {
            'name': 'market_open_message',
            'time': time(10, 0, 0, tzinfo=TIMEZONE),
            'description': 'Abertura do preg√£o √†s 10:00 (seg-sex)',
            'days': (0, 1, 2, 3, 4)
        },
        {
            'name': 'market_close_message',
            'time': time(17, 0, 0, tzinfo=TIMEZONE),
            'description': 'Fechamento do preg√£o √†s 17:00 (seg-sex)',
            'days': (0, 1, 2, 3, 4)
        }
    ]
    
    logger.info("\nüìã CONFIGURA√á√ÉO DOS JOBS:")
    logger.info("="*60)
    
    for job_config in jobs_config:
        job_time = job_config['time']
        
        # Adiciona job de teste
        if 'days' in job_config:
            scheduler.add_job(
                test_job,
                trigger='cron',
                hour=job_time.hour,
                minute=job_time.minute,
                second=job_time.second,
                day_of_week=','.join(map(str, job_config['days'])),
                timezone=TIMEZONE,
                id=job_config['name']
            )
        else:
            scheduler.add_job(
                test_job,
                trigger='cron',
                hour=job_time.hour,
                minute=job_time.minute,
                second=job_time.second,
                timezone=TIMEZONE,
                id=job_config['name']
            )
        
        # Calcula pr√≥xima execu√ß√£o
        trigger = CronTrigger(
            hour=job_time.hour,
            minute=job_time.minute,
            second=job_time.second,
            day_of_week=','.join(map(str, job_config.get('days', range(7)))),
            timezone=TIMEZONE
        )
        
        next_run = trigger.get_next_fire_time(None, now)
        
        logger.info(f"üìÖ {job_config['name']}:")
        logger.info(f"   ‚è∞ Hor√°rio: {job_time.strftime('%H:%M:%S')}")
        logger.info(f"   üìù Descri√ß√£o: {job_config['description']}")
        logger.info(f"   üîÑ Pr√≥xima execu√ß√£o: {next_run.strftime('%Y-%m-%d %H:%M:%S %Z') if next_run else 'N/A'}")
        
        # Verifica se deveria ter executado hoje
        today_execution = datetime.combine(now.date(), job_time.replace(tzinfo=None)).replace(tzinfo=TIMEZONE)
        if 'days' not in job_config or now.weekday() in job_config['days']:
            if today_execution < now:
                logger.info(f"   ‚ö†Ô∏è  DEVERIA TER EXECUTADO HOJE √ÄS {today_execution.strftime('%H:%M:%S')}!")
            else:
                logger.info(f"   ‚úÖ Ainda vai executar hoje √†s {today_execution.strftime('%H:%M:%S')}")
        else:
            logger.info(f"   ‚ÑπÔ∏è  N√£o executa hoje (dia da semana: {now.strftime('%A')})")
        
        logger.info("")
    
    # Lista jobs ativos
    logger.info("üîç JOBS ATIVOS NO SCHEDULER:")
    for job in scheduler.get_jobs():
        logger.info(f"   ‚Ä¢ {job.id}")
    
    logger.info("="*60)
    
    # Verifica timezone
    logger.info(f"\nüåç TIMEZONE CONFIGURADO: {TIMEZONE}")
    logger.info(f"üïê HOR√ÅRIO LOCAL: {datetime.now()}")
    logger.info(f"üïê HOR√ÅRIO BRASIL: {datetime.now(TIMEZONE)}")

if __name__ == "__main__":
    test_scheduler_configuration()